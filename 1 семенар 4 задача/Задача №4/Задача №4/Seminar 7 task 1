#include <iostream>
#include <algorithm>
#include <vector>

#include <numeric>
#include <random>
#include <chrono>
#include <future>
#include <thread>

bool A_point_in_a_circle(int x, int y, int R) {
	return (x * x + y * y <= R*R) ? true : false;
}

int Number_of_points_in_the_circle(int n, int R) {
	auto seed = std::chrono::system_clock::now().time_since_epoch().count();
	std::default_random_engine dre(static_cast <unsigned int> (seed));
	// Круг и квадрат нарисуем в центре координат.
	// Будем рассматривать четверти фигур (1-я четверть).
	// P(точка в кругу) = S_круга/S_квадрата = pi*R^2/4R^2 = pi/4 = N_точек в круге/n => pi = 4*(N_точек в круге/n)  
	std::uniform_int_distribution <> uid(0, R);
	int x, y, N_point_in_a_circle = 0;
	for (int i = 0; i < n; ++i) {
		x = uid(dre);
		y = uid(dre);
		(A_point_in_a_circle(x, y, R)) ? N_point_in_a_circle++ : N_point_in_a_circle = N_point_in_a_circle;
	}
	return (N_point_in_a_circle);
}


int main(){
	
	const int R = 5000;
	const int n = 100000000;
	int N_point_in_a_circle = Number_of_points_in_the_circle(n, R);
	std::cout << 4*static_cast<double>(N_point_in_a_circle)/n << '\n' << '\n' << '\n';
	
	
	N_point_in_a_circle = 0;
	const std::size_t Number_of_threads = std::thread::hardware_concurrency() != 0 ? std::thread::hardware_concurrency() - 1 : 1;
	std::vector<std::thread> threads;
	std::vector < std::future < double > > futures;
	for (unsigned int i = 0; i < Number_of_threads; ++i)
	{
		std::packaged_task<double(std::size_t, std::size_t)> task{Number_of_points_in_the_circle};
		futures.push_back(task.get_future());
		threads.push_back(std::thread(std::move(task), n/Number_of_threads, R));
	}
	//Так же нужно что бы main тоже что то делал. Но я разделил всю работу на 7 потоков (main отдыхает).

	for (auto i = 0; i < Number_of_threads; ++i)
	{
		N_point_in_a_circle += futures[i].get();
		threads[i].join();
	}

	std::cout << 4 * static_cast<double>(N_point_in_a_circle) / n << '\n' << '\n' << '\n';
	return 0;
}
