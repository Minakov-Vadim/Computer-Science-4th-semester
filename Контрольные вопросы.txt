Семинар 1
° (5 6.) Какие концепции лежат в основе стандартной библиотеки?
1) Она поставляется вместе с компилятором
2) Переносимость
3) Компактность/эффективность
4) Связывание 

° (5 б.) Зачем в проектах используются системы контроля версий?
Их использование упрощает удаленную работу в команде. Сразу несколько
программистов могут работать над проектом и моментально узнавать о доработках 
друг друга.

° (5 б.) Из каких основных действий состоит взаимодействие с Git?
Основные действия:
1) clone-клонировать удаленный репозиторий
2) commit-добавляет изменения в локальный репозиторий
3) push-отправляет локальный репозиторий в удаленный
4) pull-скачивает обновленный удаленный репозиторий

° (5 6.) Когда следует создавать отдельные ветки для разработки?
Допустим у вас приложение которым пользуются люди. Не будете же вы делать изменения прямо в этом приложении?
Вы сделаете ветку от мастера и будете делать изменения там, а когда обновление будет готово, вы вольете ветку в мастера.

° (5 6.) Какие основные элементы содержатся в библиотеке chrono?
1) Интервалы времени
2) Моменты времени
3) Таймеры
4) Псевдоним

Семинар 2
° (5.6.) В каких ситуациях применяются типы std: pair и std::tuple?
std: pair В ассоциативных массивах
std::tuple В обобщенных библиотеках

° (5 6.) Когда следует использовать контейнер std:array?
На этапе компиляции если мы знаем тип и количество элементов, то мы 
используем std:array

° (5 6.) Когда следует использовать контейнер std:vector?
stdl:vector - безопасная замена динамическому массиву.

° (5.6.) Когда следует использовать контейнер std:deque?
Идеально подходит для операций вставок с двух сторон.

° (5 6.) Когда следует использовать контейнер std:list?
Двухсвязный список. Подходит для вставки и удаления элементов в
произвольное место за О(1)

° (5 б.) Когда следует использовать контейнер std:forward_list?
Односвязный список. Используется для экономии памяти.

° (5 б.) Какие адаптеры контейнеров есть в стандартной библиотеке?
Очередь, стек, очередь с преоритетами.

° (5 6.) Когда следует использовать контейнер circular buffer из Boost?
Удобно использовать для хранения истории виксированной длинны, 
когда поступают новые данные.

° (5 6.) Почему контейнер circular buffer из Boost не может войти 
в стандарт?
Потому что может быть, что begin>end

° (5 6.) Какие типы данных для работы с многомерными массивами
вы можете назвать?
boost::multiarray

Семинар 3
° (5 6.) В каких ситуациях используются контейнеры типа множества и отображения?
set - удобен тем, что мы знаем кол-во уникальных элементов, сортирует элементы.
map - удобен для поиска элементов не по индексу, а по ключу.
multiset - тоже что и set, но только с дубликатами.
multimap - тоже что и map, но только с дубликатами

° (5) Каким требованиям должна удовлетворять качественная хэш-функция?
1)Быстро считает хэш
2)Детерменированность
3)Равномерность

° (5 6.) Из-за чего в хэш-таблицах возникают коллизии и как можно их разрешать?
Из-за того что хэш у хеш-функций ограничен, у разных элементов 
может быть одинаковых хэш. Метод цепочек разрешает коллизии.

° (5 б.) Почему сложность основных операций хэш-таблиц в худшем случае O(N)?
1)Если у нас коллизия, то нам придется искать элемент в листе, а это в
худжем случае О(n).
2)Вставка, при вставке k-го элемента можем быть перехэштрование, а это О(n).

° (5 6.) В чем заключается преимущество интерфейсов контейнера Boost Multiindex?
1)Контейнеры с множественными интерфейсами
2)Разные наборы индексов


Семинар 4
° (5 6.) Как органи зован механизм генерации случайных чисел в библиотеке random?
-----------seed -> генератор -> распределение -> случайное число
Seed - можно взять из хроно.
Генератор СЧ - источник случайности(использует seed), генерирует случайные значения(без знака).
Распределение - средство создания СЧ(использует ГСЧ)

° (5 6.) Чем отличаются функциональные объекты от функций и лямбда-выражений?
1)Функциональные объекты - Могут иметь состояния, т.к есть данные-члены, а у функций и лямбда-выражений нет,
Хотя можно сделать static переменную у функций, но это плохо.
2)Функциональные объекты - это классы, у которых есть свой тип + можно создавать разные 
экземпляры. Но у функций тип RT(Types).
3)Функциональные объекты работают быстрее функции, переданной через указатель.
Ну а лямбды просто удобно создавать на месте.

° (5 6.) Какими наборами возможностей обладают итераторы различных категорий?
Виды категорий: входной, выходной, прямой, двунаправленный, произвольного доступа.
1) Входной: копирование, присваивание, операции сравнения на равенство, 
инкремент, разыменование для чтения.
2)Выходной: копирование, присваивание,инкремент, разыменование для записи
при этом запрещено чтение. 
3)Прямой: все операции InputIterator и OutputIterator, копирование, 
обходить им последовательности много раз.
4)Двусторонний: все операции ForwardIterator, декремент.
5)Произвольного доступа: все операции BidirectionalIterator, операции сравнения,
сложение/вычитание с числом, разность итераторов, индексирование.

° (5 6.) Какая классификация предлагается для алгоритмов стандартной библиотеки?
1) Немодифицирующие
2) Модифицирующие
3) Удаления
4) Перестановки
5) Сортировки
6) Для упрощенных диапазонов
7) Численные

° (5 6.) Почему алгоритмы стандартной библиотеки предпочтительнее собственных?
Они быстрее короче и проще.


Семинар 5
° (5 6.) Почему класс std:: string имеет много перегруженных функций-членов?
Потому что программисты хотели сделать усовершенствованный тип танных, который 
может работать со строками, индексами, С-строками, итераторами.
Но это проблемно, т.к если мы что то хотим обновить в настройка string, то придется менять
очень много всего.

° (5 6.) Как осуществляется интернационализация и локализация программы?
Интернационализация
Локаль передается потокам, а уже они корректируют ввод и вывод по ней.
Интернационализация, решает проблемы, связанные со способностью программы
взаимодействовать с пользователем на его родном языке.

° (5 6.) Чем отличаются многобайтовые кодировки от широких кодировок?
Многобайтовое представление более компактно по сравнению с расширенным.
В расширенном представлении с символами фиксированного размера гораздо удобнее работать.

° (5 6.) Какие компоненты входят в стандарт кодирования символов Unicode?
1)Семейство кодировок UTF
2)универсальный набор символов UCS

° (5 6.) Для решения каких задач удобно использовать регулярные выражения?
Когда ты что то ищешь в тексте. Особенно если нужно найти то, что имеет структуру,
например почтовые адреса


Семинар №6
° (5 6.) Как организована иерархия классов потоков в библиотеке IOStream?
                             ios_base
                             |
                             |
                             basic_ios ---> basic_stream buf
                             |
                             |
                        -------------
                       |             |
                       |             |
cin <----- basic_istream         basic_ostream ----> cout, cevr, clog
                 |                    |
                 ----------------------
                 |         |          |
         ---------         |          ----------- 
         |           basic_iostream             |
         |                 |                    |
   basic_ifstream          |            basic_ofstream
                           |
                     basic_fstream   

° (5 6.) Какие состояния потоков реализованы в базовом классе basic_ios?
1)goodbit - все в порядке
2)eofbit - конец файла (вместе с failbit) 
3)failbit - сбой при вводе выводе
4)badbit - фатальная ошибка 

° (5 6.) В чем разница между манипуляторами и флагами форматирования?
Манипуляторы управляют потоком данных.
А флаги управляют глобальным форматированием.

° (5 6.) Из каких основных элементов состоят пути в файловой системе?
1)Имя
2)Название
3)Расширение файла
4)Директория
5)Родительский путь
6)Путь корня

° (5 6.) Зачем нужны форматы обмена данными, такие как JSON и XML?
Могут быть использованы для передачи данных между разными 
языками программирования

Семинар №7
° (5 6.) Что такое контекстное переключение задач?
Контекстное переключение задач — процесс прекращения выполнения процессором одной задачи 
с сохранением всей необходимой информации и состояния, необходимых для 
последующего продолжения с прерванного места, и восстановления 
и загрузки состояния задачи, к выполнению которой переходит процессор, а именно:
1)Сохранить сосояние задачи.
2)Сохранить счетчик команд.
3)Определить следующую команду.
4)Загрузить состояние задачи.

° (5 6.) Назовите основные подходы к организации параллелизма?
1)Использование потоков в разных процессов с разными адресными пространствами
2)Использоание потоков в одном процессе с одним адресным пространством

° (5 6.) Что может влиять на производительность параллельных алгоритмов?
1)Кол-во исполнителей
2)Конкуренция за данные
3)Ложное разделение

° (5 6.) Как в стандартной библиотеке реализована концепция асинхронного исполнения?
Концепция асинхронного исполнения реализована на библиотеке future и на классе std::async.

° (5 6.) Что нужно учитывать при замене последовательной реализации алгоритма на параллельную?
Не всегда параллельное выполнение быстрее последовательного. На это отвечает вопрос (3).
Важно учитывать обьем вычислений, при простых операциях ожидание основной памяти
очень долго и последовательная версия может обгонять параллельную.
Надо проводить замеры времени работы.

Семинар №8
Контрольные вопросы:
° (5 6.) Что есть «состояние гонки» и к чему оно может привести?
Конкуренция за данные, кто первый к ним обратится. Если у вас читающие потоки, то
они могут считать то, что не нужно

° (5 6.) Как используются мьютексы и условные переменные?
Мьютекс блокирует(захватывает поток). Другие потоки не могут к нему обрачаться пока он не освободится.

° (5.6.) На что влияет выбор гранулярности блокировки?
На время, потоки встанут в очередь и будут ждать.
На скорость от параллельного программирования из за глобальной ошибки

° (5.6.) Когда возникает взаимоблокировка и как ее предотвратить?
Если использовать несколько мьютексов, то может возникнуть ошибка deadlock.
Предотвращение: 
1)Не использование мьютексов
2)Приоритеты мьютексов или иерархия мьютексов
3)Одинаковый порядок захвата

° (5 6.) Что есть атомарная операция и атомарный тип данных?
Это операции которые должны быть выполнены полность, а атомарные типы, это типы обладающие атомарными операциями.



Семинар №9
Контрольные вопросы:
° (5 6) Какие средства используются для организации межпроцессного взаимодействия?
1)Shared memory(разделяемая память) - самый быстрый способ IPC. Он создает и отображает
участок памяти в АП каждого указанного процесса, но нужна синхронизация.

° (5 6.) Чем файлы, отображаемые в память, отличаются от разделяемой памяти?
Memory mapped files - часть АП процесса ассоциируется с файлом, можно
использовать для IPC и работы с файлом, управление на уровне filesystem, 
и это медленнее из за работы ОС по сравнению с shared memory.

° (5 6.) Что необходимо учитывать при создании контейнеров в разделяемой памяти?
Использование второго аргументра с get segment manager. Знать где находится контейнер.

° (5 6.) Чем отличаются анонимные и именованные примитивы синхронизации?
Анонимные - хранятся в shared memory
именованные - управляются ОС


Семинар №10
Контрольные вопросы:
° (5 6.) Какие уровни входят в модель OSI и за что они отвечают?
Уровень         Тип данных                 Функции                                Примеры
Физический         Биты         Работа со средой передачи данных            Провод, оптоволокно и тд
Канальный          Биты         Решается задача физической адресации        Сетевая карта, езернет
Сетевой           Пакеты        Решается задача логической адресации        IP адреса(IPv4, IPv6)
Транспортный     Сегменты(датограммы, сообщения)      Прямая передача данных       Протоколы сетевого взаимодействия(TSP/IP: TSP, UDP)
Сеансовый                           Управление сеансом связи
Представления                   Решается задача шифрования данных(кодирование)     ASCII, JPEF    
Прикладной                          Доступ к сетевым службам                       http, SMPT, POP3

° (5 6.) Перечислите основные особенности протоколов TCР и UDP?
Протокол TCP:
1)Надежный, гарантирует доставку, обрабатывает ошибки.
2)Требует установки логического соединения.
3)Работает 1 к 1
4)Данные представляют из себя поток байт

Протокол UTP:
1)Ненадежный, не гарантирует доставку, не обрабатывает ошибки
2)Не требует установки логического соединения.
3)Работает 1 ко многим
4)Данные представляют из себя датограммы

° (5 6.) Какие данные необходимы для сетевого взаимодействия?
IP адрес и порт на устройстве под это взаимодействие.

° (5 6.) Какие функции выполняют пассивные и активные сокеты?
Сокеты:
(1)Установка соединения
(2)Передача данных
Активные (1) (2)
Пассивные (1) [Только сервер TCP]

° (5 6.) Как устанавливается логическое соединение протокола ТСР?
client                             Server                           
 |                                  |
 |                                  |
 |                                  |  
endpoint сервера                 endpoint
|                                   |
|                                   |
|                                   |
active socket                  passive socket(+bind)
|                                   |
|                                   | 
|                                   |   
conneer  ---------------------->  listen 
^    |                                | 
|    |                                |
|    |                           active socket
|    |                                |
|    |                                |
|    |------Готов принимать?----->    |
<---------Готов отправить?-----------accept 
